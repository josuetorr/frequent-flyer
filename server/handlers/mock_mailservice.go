// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/josuetorr/frequent-flyer/server/handlers/ (interfaces: MailService)
//
// Generated by this command:
//
//	mockgen -destination=server/handlers/mock_mailservice.go -package=handlers github.com/josuetorr/frequent-flyer/server/handlers/ MailService
//

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailService is a mock of MailService interface.
type MockMailService struct {
	ctrl     *gomock.Controller
	recorder *MockMailServiceMockRecorder
	isgomock struct{}
}

// MockMailServiceMockRecorder is the mock recorder for MockMailService.
type MockMailServiceMockRecorder struct {
	mock *MockMailService
}

// NewMockMailService creates a new mock instance.
func NewMockMailService(ctrl *gomock.Controller) *MockMailService {
	mock := &MockMailService{ctrl: ctrl}
	mock.recorder = &MockMailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailService) EXPECT() *MockMailServiceMockRecorder {
	return m.recorder
}

// GenerateEmailLink mocks base method.
func (m *MockMailService) GenerateEmailLink(userID, endpoint, secret string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmailLink", userID, endpoint, secret)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateEmailLink indicates an expected call of GenerateEmailLink.
func (mr *MockMailServiceMockRecorder) GenerateEmailLink(userID, endpoint, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmailLink", reflect.TypeOf((*MockMailService)(nil).GenerateEmailLink), userID, endpoint, secret)
}

// SendPasswordResetEmail mocks base method.
func (m *MockMailService) SendPasswordResetEmail(ctx context.Context, link, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordResetEmail", ctx, link, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordResetEmail indicates an expected call of SendPasswordResetEmail.
func (mr *MockMailServiceMockRecorder) SendPasswordResetEmail(ctx, link, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordResetEmail", reflect.TypeOf((*MockMailService)(nil).SendPasswordResetEmail), ctx, link, to)
}

// SendVerificationEmail mocks base method.
func (m *MockMailService) SendVerificationEmail(ctx context.Context, link, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", ctx, link, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockMailServiceMockRecorder) SendVerificationEmail(ctx, link, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockMailService)(nil).SendVerificationEmail), ctx, link, to)
}
