// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/josuetorr/frequent-flyer/server/handlers/ (interfaces: SessionService)
//
// Generated by this command:
//
//	mockgen -destination=server/handlers/mock_sessionservice.go -package=handlers github.com/josuetorr/frequent-flyer/server/handlers/ SessionService
//

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	models "github.com/josuetorr/frequent-flyer/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
	isgomock struct{}
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// GetWithUser mocks base method.
func (m *MockSessionService) GetWithUser(ctx context.Context, sessionID, userID string) (*models.Session, *models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithUser", ctx, sessionID, userID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*models.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithUser indicates an expected call of GetWithUser.
func (mr *MockSessionServiceMockRecorder) GetWithUser(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithUser", reflect.TypeOf((*MockSessionService)(nil).GetWithUser), ctx, sessionID, userID)
}
