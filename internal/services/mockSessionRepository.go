// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/josuetorr/frequent-flyer/internal/services/ (interfaces: SessionRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/services/mockSessionRepository.go -package=services github.com/josuetorr/frequent-flyer/internal/services/ SessionRepository
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/josuetorr/frequent-flyer/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
	isgomock struct{}
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSessionRepository) Delete(ctx context.Context, sessionID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionRepositoryMockRecorder) Delete(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionRepository)(nil).Delete), ctx, sessionID, userID)
}

// GetWithUser mocks base method.
func (m *MockSessionRepository) GetWithUser(ctx context.Context, sessionID, userID string) (*models.Session, *models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithUser", ctx, sessionID, userID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*models.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithUser indicates an expected call of GetWithUser.
func (mr *MockSessionRepositoryMockRecorder) GetWithUser(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithUser", reflect.TypeOf((*MockSessionRepository)(nil).GetWithUser), ctx, sessionID, userID)
}

// Insert mocks base method.
func (m *MockSessionRepository) Insert(ctx context.Context, session *models.Session) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, session)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockSessionRepositoryMockRecorder) Insert(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSessionRepository)(nil).Insert), ctx, session)
}
